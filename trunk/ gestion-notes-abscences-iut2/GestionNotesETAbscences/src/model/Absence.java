package model;


import java.util.ArrayList;
import java.util.List;

import org.apache.torque.TorqueException;
import org.apache.torque.om.Persistent;

/**
 * Tableau absence
 *
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Thu Jan 10 11:37:58 CET 2013]
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 */
public  class Absence
    extends model.BaseAbsence
    implements Persistent
{
    /** Serial version */
    private static final long serialVersionUID = 1357814278388L;

    
    /**
     * Return list of Absences for a etudiantId sent
     *
     * @return List<Absence>
     */
	public static List<Absence> getAbsencesEtudiant(int etudiantId) throws TorqueException
    {
    	List<Absence> absences = new ArrayList<Absence>();
    	Etudiant etudiant = EtudiantPeer.retrieveByPK(etudiantId);
		List<Absence> listAbsences = etudiant.getAbsences();
		for(Absence absence : listAbsences){
			absences.add(absence);
		}
		return absences;
    }
    
    /**
     * Return list of Absences for a etudiantId and matiereId sent
     *
     * @return List<Absence>
     */
	public static List<Absence> getAbsencesEtudiantForMatiere(int etudiantId, int matiereId) throws TorqueException
    {
    	List<Absence> absences = new ArrayList<Absence>();
    	Etudiant etudiant = EtudiantPeer.retrieveByPK(etudiantId);
		List<Absence> listAbsences = etudiant.getAbsences();
		for(Absence absence : listAbsences){
			if(absence.getMatiereId()==matiereId)
				absences.add(absence);
		}
		return absences;
    }
    
    /**
     * Return list of Absences for a groupeId sent
     *
     * @return List<Absence>
     */
	public static List<Absence> getAbsencesGroupe(int groupeId) throws TorqueException
    {
    	List<Absence> absences = new ArrayList<Absence>();
    	Groupe groupe = GroupePeer.retrieveByPK(groupeId);
		List<Etudiant> listEtu = groupe.getEtudiants();
		for(Etudiant etu : listEtu){
			List<Absence> listAbsences = etu.getAbsences();
			for(Absence absence : listAbsences){
				absences.add(absence);
			}
		}
		return absences;
    }
    
    /**
     * Return list of Absences for a groupeId and matiereId sent
     *
     * @return List<Absence>
     */
	public static List<Absence> getAbsencesGroupeForMatiere(int groupeId, int matiereId) throws TorqueException
    {
    	List<Absence> absences = new ArrayList<Absence>();
    	Groupe groupe = GroupePeer.retrieveByPK(groupeId);
			List<Etudiant> listEtu = groupe.getEtudiants();
			for(Etudiant etu : listEtu){
				List<Absence> listAbsences = etu.getAbsences();
				for(Absence absence : listAbsences){
					if(absence.getMatiereId()==matiereId)
						absences.add(absence);
				}
			}
		return absences;
    }
}
